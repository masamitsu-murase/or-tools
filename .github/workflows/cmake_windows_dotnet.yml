name: CMake Windows .Net

on: [push, pull_request]

jobs:
  # Building using the github runner environement directly.
  cmake:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install SWIG 4.0.2
      run: |
        (New-Object System.Net.WebClient).DownloadFile("http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip","swigwin-4.0.2.zip");
        Expand-Archive .\swigwin-4.0.2.zip .;
        echo "$((Get-Item .).FullName)/swigwin-4.0.2" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Check swig
      run: swig -version
      # Install .NET SDKs
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Check dotnet
      run: dotnet --info
    - name: Check cmake
      run: cmake --version
    - name: Configure
      run: cmake -S. -Bbuild -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_DOTNET=ON -DBUILD_CXX_SAMPLES=OFF -DBUILD_CXX_EXAMPLES=OFF -DUSE_SCIP=OFF
    - name: Build
      run: cmake --build build --config Release --target ALL_BUILD -v -- /maxcpucount
    - name: Test
      run: cmake --build build --config Release --target RUN_TESTS -v -- /maxcpucount
    - name: Install
      run: cmake --build build --config Release --target INSTALL -v -- /maxcpucount

    - name: Copy nupkg
      run: copy build\dotnet\packages\*.nupkg .
    - uses: actions/upload-artifact@v2
      with:
        name: nuget
        path: ./*.nupkg

  release:
    if: startsWith(github.ref, 'refs/tags/v')

    needs: cmake

    runs-on: ubuntu-20.04

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Release note.
        draft: true
        prerelease: false

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: nuget
        path: nuget

    - run: ls -alF nuget

    - name: Upload all artifacts
      uses: actions/github-script@v6
      env:
        RELEASE_ID: ${{ steps.create_release.outputs.id }}
        ASSETS_DIR: nuget
      with:
        script: |
          console.log("environment", process.versions);
          const fs = require("fs").promises;
          const path = require("path");
          const { repo: { owner, repo } } = context;
          const release_id = process.env["RELEASE_ID"];
          const assets_dir = process.env["ASSETS_DIR"];

          const files = await fs.readdir(assets_dir);
          console.log("files", files);
          const asset_uploaders = files.map(file => path.join(assets_dir, file)).map(file => {
            return fs.readFile(file).then(data => {
              return github.rest.repos.uploadReleaseAsset({
                owner,
                repo,
                release_id,
                name: path.basename(file),
                data
              });
            });
          });
          await Promise.all(asset_uploaders);

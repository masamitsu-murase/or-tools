name: Make Windows .Net

on: [push, pull_request]

jobs:
  # Building using the github runner environement directly.
  make:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
      # Install .NET SDKs
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Check dotnet
      run: dotnet --info
    - name: Check make
      run: tools\make --version
    - name: Check system
      run: tools\make detect_port
    - name: Check .Net
      run: tools\make detect_dotnet
    - name: Build C++ and .NET
      run: tools\make dotnet JOBS=4
    - name: Test .Net
      run: tools\make test_dotnet -j4
    - name: Create nuget packages
      run: tools\make package_dotnet

    - name: Copy nupkg
      run: copy build_make\dotnet\packages\*.nupkg .
    - uses: actions/upload-artifact@v2
      with:
        name: nuget
        path: ./*.nupkg

  # release:
  #   if: startsWith(github.ref, 'refs/tags/v')

  #   needs: make

  #   runs-on: ubuntu-20.04

  #   steps:
  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       body: |
  #         Release note.
  #       draft: true
  #       prerelease: false

  #   - name: Download artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: nuget
  #       path: nuget

  #   - run: ls -alF nuget

  #   - name: Upload all artifacts
  #     uses: actions/github-script@v6
  #     env:
  #       RELEASE_ID: ${{ steps.create_release.outputs.id }}
  #       ASSETS_DIR: nuget
  #     with:
  #       script: |
  #         console.log("environment", process.versions);
  #         const fs = require("fs").promises;
  #         const path = require("path");
  #         const { repo: { owner, repo } } = context;
  #         const release_id = process.env["RELEASE_ID"];
  #         const assets_dir = process.env["ASSETS_DIR"];

  #         const files = await fs.readdir(assets_dir);
  #         console.log("files", files);
  #         const asset_uploaders = files.map(file => path.join(assets_dir, file)).map(file => {
  #           return fs.readFile(file).then(data => {
  #             return github.rest.repos.uploadReleaseAsset({
  #               owner,
  #               repo,
  #               release_id,
  #               name: path.basename(file),
  #               data
  #             });
  #           });
  #         });
  #         await Promise.all(asset_uploaders);
